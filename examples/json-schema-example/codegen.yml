schema:
  'Fake API':
    loader: '@omnigraph/json-schema'
    baseUrl: https://not-existing-api.com/API
    operations:
      - type: Query
        field: me
        path: /me
        method: GET
        responseSchema: ./json-schemas/user.json#/definitions/User
      - type: Query
        field: company
        path: /company/{args.id}
        method: GET
        responseSchema: ./json-schemas/company.json#/definitions/Company
        argTypeMap:
          id: ID!
      - type: Mutation
        field: createUser
        path: /user
        method: PUT
        requestSample: ./json-samples/user-input.json
        responseSchema: ./json-schemas/user.json#/definitions/User
      - type: Mutation
        field: updateUser
        path: /user/{args.id}
        argTypeMap:
          id: ID!
        method: POST
        requestSample: ./json-samples/user-input.json
        responseSchema: ./json-schemas/user.json#/definitions/User # This can be `responseSample` with a sample JSON file

documents: example-query.graphql

generates:
  sdk.ts:
    plugins:
      - typescript
      - typescript-operations
      - typescript-generic-sdk
